?lapply
?split
library(datasets)
data(iris)
data
?iris
str(iris)
mean(iris$Sepal.Length,na.rm=TRUE)
mean(iris$Sepal.Length,na.rm=TRUE)
iris
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
mtcars
?tapply
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
cylFour<-subset(mtcars,mtcars$cyl==4)
cylEight<-subset(mtcars,mtcars$cyl==8)
cylFour
mean(cylFour$hp)-mean(cylEight$hp)
debug(ls)
ls(asd,fd)
?ls
0
.Ob <- 1
ls(pattern = "O")
?debug
iris
v<-subset(iris,Species==virginica)
v<-subset(iris,iris$Species==virginica)
v<-subset(iris,iris$Species==virginica)
iris
v<-subset(iris,iris$Species==virinica)
v<-subset(iris,iris$Species==virginica)
iris.$Species
iris$Species
iris$Species==virginica
v<-subset(iris,iris$Species=="virginica")
v
mean(v$Sepal.Length)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcar
mtcars
q()
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("installr")
library(installr)
update()
installr()
install.packages("datasets")
install.packages("datasets")
library(datasets)
library(datasets)
hist(airquality$Ozone)
with(airquality,plot(Wind,Ozone))
airquality<-transform(airquality,Month=factor(Month))
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)")
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
legend("topright",pch=1,col=c("blue","red"),legned=c("May","Other Months"))
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(subset(airquality,Month!=5),points(Wind,Ozone,col="red"))
legend("topright",pch=1,col=c("blue","red"),legned=c("May","Other Months"))
legend("topright",pch=1,col=c("blue","red"),legend=c("May","Other Months"))
with(airquality,plot(Wind,Ozone,main="Ozone and Wind in NeW York City",pch=20))
model<-lm(Ozone~Wind,airquality)
abline(mode,lwd=2)
abline(model,lwd=2)
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
plot(Temp,Ozone,main="Ozone and Temperature")
mtext(â€œOzone and Weather in New York City", outer=TRUE)
mtext("Ozone and Weather in New York City",outer=TRUE)
})
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
plot(Temp,Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
})
par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
with(airquality,{
plot(Wind,Ozone,main="Ozone and Wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
plot(Temp,Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
})
####Base Plotting Demonstration
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
par(mar=c(2,2,2,2))
####Base Plotting Demonstration
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
par(mar=c(2,2,2,2))
install.packages("httr")
install.packages("XML")
library(httr)
library(XML)
?httr
install.packages("httpuv")
library(httpuv)
library(httr)
library(XML)
##Find OAuth settings for github
oauth_endpoints("github")
##After making application, replace key and secret below
myapp <- oauth_app("github",
key = "3cdab49f37411ce420a7",
secret = "15b444271aa808212c43308b858c34882dac3724")
##Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?fromJSON
fromJSON(toJSON(req))
install.pacakges("JSON")
install.packages("JSON")
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
?fromJSON
?fromJSON
install.packages("jsonlite")
utils:::menuInstallPkgs()
ls()
content(req)
req$permissions$pull
q()
setwd("C:/Users/DH/Desktop/Coursera Data Science/Regression_Models")
setwd("C:/Users/DH/Desktop/Coursera Data Science/Regression_Models/Week 2")
library(UsingR)
data(diamond)
library(UsingR)
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
fit <- lm(price ~ carat, data = diamond)
coef(fit)
summary(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
?I
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
coef(fit3)
fit3 <- lm(price ~ I(carat * 10), data = diamond)
coef(fit3)
?predict
predict(fit)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
max(abs(e -(y - yhat)))##Find the max residue
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
sum(e*x)
sum(e)##Also sum to zero
plot(diamond$carat, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
plot(diamond$carat, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
plot(diamond$carat, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
##Example
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
##Find Residue
##Find predicted value for observed inputs
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))##Find the max residue
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
sum(e)##Residues sum to zero
x <- runif(100, -3, 3);
y <- x + sin(x) + rnorm(100, sd = .2);
plot(x, y); abline(lm(y ~ x))
##Residue plot
plot(x, resid(lm(y ~ x)));
abline(h = 0)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
summary(fit)$sigma
sqrt(sum(resid(fit)^2) / (n - 2))
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
require(stats); require(graphics); data(anscombe)
ff <- y ~ x
function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE,
character.only = FALSE)
{
if (!character.only)
package <- as.character(substitute(package))
loaded <- paste("package", package, sep = ":") %in% search()
if (!loaded) {
if (!quietly)
packageStartupMessage(gettextf("Loading required package: %s",
package), domain = NA)
value <- tryCatch(library(package, lib.loc = lib.loc,
character.only = TRUE, logical.return = TRUE, warn.conflicts = warn.conflicts,
quietly = quietly), error = function(e) e)
if (inherits(value, "error")) {
if (!quietly) {
msg <- conditionMessage(value)
cat("Failed with error:  ", sQuote(msg), "\n",
file = stderr(), sep = "")
.Internal(printDeferredWarnings())
}
return(invisible(FALSE))
}
if (!value)
return(invisible(FALSE))
}
else value <- TRUE
invisible(value)
}
require(stats); require(graphics); data(anscombe)
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
## or   ff[[2]] <- as.name(paste0("y", i))
##      ff[[3]] <- as.name(paste0("x", i))
for(i in 1:4) {
mods[[i]] <- lmi <- lm(ff, data = anscombe)
#print(anova(lmi))
}
##Example
require(stats); require(graphics); data(anscombe)
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
## or   ff[[2]] <- as.name(paste0("y", i))
##      ff[[3]] <- as.name(paste0("x", i))
mods[[i]] <- lmi <- lm(ff, data = anscombe)
#print(anova(lmi))
}
## Now, do what you should have done in the first place: PLOTS
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
